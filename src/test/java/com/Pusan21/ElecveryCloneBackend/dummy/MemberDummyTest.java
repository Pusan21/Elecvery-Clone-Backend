package com.Pusan21.ElecveryCloneBackend.dummy;

import com.Pusan21.ElecveryCloneBackend.entity.Member;
import com.Pusan21.ElecveryCloneBackend.repository.MemberRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.assertj.core.api.Assertions;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@SpringBootTest
@Slf4j
public class MemberDummyTest {

    @Autowired
    MemberRepository memberRepository;

    @Test
    void generateDummyMembers() {
        //[Fixed members 0-2]
        //Password hashes are generated by: https://bcrypt-generator.com/
        ZonedDateTime date0 = ZonedDateTime.of(1970, 1, 1, 0, 0, 0, 0, ZoneId.of("Asia/Seoul"));
        Member member0 = new Member("choigilteun",
                "$2a$12$TlgCrGMUi41XrjETM794BuTvGuGXbfxrV.AtfzHPvSpSMXR/Rv92C",
                "gilteun@random.com",
                "gilteun",
                "user",
                date0,
                date0);
        memberRepository.save(member0);

        ZonedDateTime date1 = ZonedDateTime.of(2001, 1, 1, 3, 12, 12, 12, ZoneId.of("Asia/Calcutta"));
        ZonedDateTime date2 = date1.plus(30, ChronoUnit.DAYS);
        Member member1 = new Member("readytogo",
                "$2a$12$pWxEz/4CaZtnF5Crn3qnNuE5XHn8jVCfK6AO2hloRo.AvPSv5YMta",
                "ready@google.com",
                "readY",
                "user",
                date1,
                date2);
        memberRepository.save(member1);

        ZonedDateTime date3 = ZonedDateTime.of(2021, 5, 13, 10, 22, 3, 59, ZoneId.of("Asia/Seoul"));
        ZonedDateTime date4 = date3.plus(10, ChronoUnit.SECONDS);
        Member member2 = new Member("hongisme",
                "$2a$12$1LaWu9pQnkSkPzY2wK2rduwsXj3a5rCjkRkoFWj.tK2U/KO1voXeG",
                "hongGilDong@naver.com",
                "hongGilDong",
                "host",
                date3,
                date4);
        memberRepository.save(member2);

        List<Member> members = memberRepository.findAll();

        Assertions.assertThat(members.get(0).getMemberNumber()).isEqualTo(1);
        Assertions.assertThat(members.get(0).getLoginId()).isEqualTo("choigilteun");
        Assertions.assertThat(members.get(1).getMemberNumber()).isEqualTo(2);
        Assertions.assertThat(members.get(1).getLoginId()).isEqualTo("readytogo");
        Assertions.assertThat(members.get(2).getMemberNumber()).isEqualTo(3);
        Assertions.assertThat(members.get(2).getLoginId()).isEqualTo("hongisme");
    }

}
