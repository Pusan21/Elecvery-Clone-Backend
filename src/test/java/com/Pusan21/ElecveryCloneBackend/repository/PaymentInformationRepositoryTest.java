package com.Pusan21.ElecveryCloneBackend.repository;

import static org.assertj.core.api.Assertions.assertThat;

import com.Pusan21.ElecveryCloneBackend.entity.Member;
import com.Pusan21.ElecveryCloneBackend.entity.PaymentInformation;
import com.Pusan21.ElecveryCloneBackend.helper.PaymentInformationRepositoryTestHelper;
import java.time.Year;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

public class PaymentInformationRepositoryTest extends
    PaymentInformationRepositoryTestHelper {

  @Autowired
  MemberRepository memberRepository;

  void generateDummyMembers() {
    //[Fixed members 0-2]
    //Password hashes are generated by: https://bcrypt-generator.com/
    memberRepository.deleteAll();

    ZonedDateTime createDateTime =
        Year
            .of(1970).atMonth(1).atDay(1).atTime(0, 0)
            .atZone(ZoneId.of("Asia/Calcutta"));
    ZonedDateTime lastLoginDateTime = createDateTime;
    memberRepository.save(
        new Member("choigilteun",
            "$2a$12$TlgCrGMUi41XrjETM794BuTvGuGXbfxrV.AtfzHPvSpSMXR/Rv92C",
            "gilteun@random.com",
            "gilteun",
            "user",
            createDateTime,
            lastLoginDateTime
        )
    );

    createDateTime =
        Year
            .of(2001).atMonth(1).atDay(1).atTime(3, 12)
            .atZone(ZoneId.of("Asia/Seoul"));
    lastLoginDateTime = createDateTime.plus(30, ChronoUnit.DAYS);
    memberRepository.save(
        new Member("readytogo",
            "$2a$12$pWxEz/4CaZtnF5Crn3qnNuE5XHn8jVCfK6AO2hloRo.AvPSv5YMta",
            "ready@google.com",
            "readY",
            "user",
            createDateTime,
            lastLoginDateTime
        )
    );

    createDateTime =
        Year
            .of(2021).atMonth(5).atDay(13).atTime(10, 22)
            .atZone(ZoneId.of("Asia/Seoul"));
    lastLoginDateTime = createDateTime.plus(10, ChronoUnit.SECONDS);
    memberRepository.save(
        new Member("hongisme",
            "$2a$12$1LaWu9pQnkSkPzY2wK2rduwsXj3a5rCjkRkoFWj.tK2U/KO1voXeG",
            "hongGilDong@naver.com",
            "hongGilDong",
            "host",
            createDateTime,
            lastLoginDateTime
        )
    );
  }

  @Test
  @DisplayName("내 지불 정보 등록 테스트")
  public void addMyPaymentInformation() {
    // given
    generateDummyMembers();
    Member member = memberRepository.findAll().get(0);
    PaymentInformation paymentInformation = generatePaymentInformation(1L, "1234", "부산대학교학생지원카드",
        member);

    em.flush();
    em.clear();

    // when
    PaymentInformation findPaymentInformation = paymentInformationRepository.findById(
        paymentInformation.getPaymentInformationNumber()).orElse(null);

    // then
    assertThat(paymentInformation.getPaymentInformationNumber()).isEqualTo(
        findPaymentInformation.getPaymentInformationNumber());
  }

  @Test
  @DisplayName("내 지불 정보 삭제 테스트")
  public void deleteMyPaymentInformation() {
    // given
    generateDummyMembers();
    Member member = memberRepository.findAll().get(0);
    PaymentInformation paymentInformation = generatePaymentInformation(1L, "1234", "부산대학교학생지원카드",
        member);

    em.flush();
    em.clear();

    // when
    paymentInformationRepository.delete(paymentInformation);
    PaymentInformation findPaymentInformation = paymentInformationRepository.findById(
        paymentInformation.getPaymentInformationNumber()).orElse(null);

    // then
    assertThat(findPaymentInformation).isEqualTo(null);
  }

  @Test
  @DisplayName("내 지불 정보 조회, 등록한 지불 정보 개수 테스트")
  public void getMyPaymentInformations() {
    // given
    generateDummyMembers();
    Member member1 = memberRepository.findAll().get(0);
    PaymentInformation paymentInformation = generatePaymentInformation(1L, "1234", "부산대학교학생지원카드",
        member1);
    generatePaymentInformation(2L, "5678", "국민카드",
        member1);
    Member member2 = memberRepository.findAll().get(1);
    generatePaymentInformation(3L, "9123", "컴퓨터공학카드",
        member2);

    em.flush();
    em.clear();

    // when
    List<PaymentInformation> paymentInformations = paymentInformationRepository.findAllByMember(
        member1);
    PaymentInformation findPaymentInformation = paymentInformationRepository.findById(
        paymentInformation.getPaymentInformationNumber()).orElse(null);

    // then
    assertThat(paymentInformation.getPaymentInformationNumber()).isEqualTo(
        findPaymentInformation.getPaymentInformationNumber());
    assertThat(paymentInformation.getCardNumber()).isEqualTo(
        findPaymentInformation.getCardNumber());
    assertThat(paymentInformation.getCardDetail()).isEqualTo(
        findPaymentInformation.getCardDetail());
    assertThat(paymentInformation.getMember().getMemberId()).isEqualTo(
        findPaymentInformation.getMember().getMemberId());

    assertThat(paymentInformations.size()).isEqualTo(2);

    // assertThat(paymentInformation.getMember()).isEqualTo(findPaymentInformation.getMember());
    // Member 는 동일한 값을 가진 다른 인스턴스라서 위 테스트가 깨집니다.
  }
}
